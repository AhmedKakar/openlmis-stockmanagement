#%RAML 0.8
---
title: OpenLMIS Stock Management API
version: "@version@"
baseUri: "http://localhost:8080"

documentation:
    - title: Getting Started
      content: Welcome to the OpenLMIS Stock Management Service documentation.
schemas:
  - optionalFields: !include schemas/optionalFields.json
  - stockEvent: !include schemas/stockEvent.json

resourceTypes:
    - collection:
        get:
            responses:
                200:
                  description: Collection retrieved successfully
                  headers:
                    X-Content-Type-Options:
                    X-XSS-Protection:
                  body:
                      application/json:
                          schema: <<schema>>
                404:
                  description: Collection is empty.
                  headers:
                    X-Content-Type-Options:
                    X-XSS-Protection:
        post:
            body:
                application/json:
                    schema: <<schema>>
            responses:
                201:
                  description: Item created successfully
                  headers:
                    X-Content-Type-Options:
                    X-XSS-Protection:
                  body:
                      application/json:
                          schema: <<schema>>
    - member:
        get:
            responses:
                200:
                    body:
                        application/json:
                            schema: <<schema>>
        post:
            body:
                application/json:
                    schema: <<schema>>
            responses:
                200:
                    body:
                        application/json:
                            schema: <<schema>>
        delete:
            responses:
                200:

/api:
  /stock-management:

    /configuration:
        displayName: Configurations
        /optional-fields:
            get:
                description: Get optional fields
                queryParameters:
                  facilityType:
                    required: false
                  program:
                    required: false
                responses:
                  200:
                    description: |
                      Returns all available optional fields to choose from when no query parameters are passed.
                      Returns enabled optional fields that match facility type and program when query parameters are given.
                    headers:
                      X-Content-Type-Options:
                      X-XSS-Protection:
                    body:
                      application/json:
                        schema: optionalFields
                  404:
                    description: Optional fields config not found for the given query parameter.

            post:
                description: Create optional fields configuration for a facility-type&program combination.
                body:
                  application/json:
                    schema: optionalFields
                responses:
                  200:
                    description: Indicates that a new configuration has been created
                  400:
                    description: Indicats that validation failed while trying to create configuration.

        /min-stock:
          get:
          post:

    /stock-event:
        post:
          description: Create a new stock event
          body:
            application/json:
              schema: stockEvent
              example:  |
                {
                  "facility":"id1"
                  "movements":[
                    {"product":"pid1",reason:"rid1","quantity":"10"},
                    {"product":"pid2",reason:"rid2","quantity":"15"}
                    //there could be other fields too in the body of movement
                  ]
                }
          responses:
            200:
              description: Stock event has been processed, corresponding stock movements have been made. (It might also indicate that stock cards have been created, this depends on what timing we choose for stock cards creation.)

    /stock-cards:
        get:
          description: Get a list of stock cards of a facility
          queryParameters:
            facility:
              required: true
            program:
              required: false
              description: If not present, will return all stock cards that belong to a facility. (Front end could use this to load all stock cards, then filter them by program without sending more requests.)
            soh_only:
              type: boolean
              required: false
              description: When true, body of each stock card will only contain product name and soh. (Front end may use this to display list view without loading too much data.)
          responses:
            200:
              body:
                application/json:
                  example: |
                    [
                      {id:"uuid1", product:"A Drug", SOH: 10},
                      {id:"uuid2", product:"B Drug", SOH: 20},
                      //......
                    ]

        post:
          description: Not sure if we need post here. If we only create a stock card when a product has its first movement, then the post here is not necessary.It'll just be done inside of the "stock-event" end point.

    /stock-card/[id]:
        get:
          description: Get full details of one stock card
          responses:
            200:
              body:
                application/json:
                  example: |
                      {id:"uuid", product:"A Drug", SOH: 10, movements:[......]}

    /stock-card:
      post:
        description: Not sure if we need post here. If we only create a stock card when a product has its first movement, then the post here is not necessary.It'll just be done inside of the "stock-event" end point.