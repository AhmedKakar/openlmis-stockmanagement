/*
 * This program is part of the OpenLMIS logistics management information system platform software.
 * Copyright © 2017 VillageReach
 *
 * This program is free software: you can redistribute it and/or modify it under the terms
 * of the GNU Affero General Public License as published by the Free Software Foundation, either
 * version 3 of the License, or (at your option) any later version.
 *  
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
 * See the GNU Affero General Public License for more details. You should have received a copy of
 * the GNU Affero General Public License along with this program. If not, see
 * http://www.gnu.org/licenses.  For additional information contact info@OpenLMIS.org. 
 */

package org.openlmis.stockmanagement.dto;

import static java.time.ZonedDateTime.now;
import static org.apache.commons.collections.CollectionUtils.isEmpty;

import org.openlmis.stockmanagement.domain.event.StockEvent;
import org.openlmis.stockmanagement.domain.event.StockEventLineItem;
import org.openlmis.stockmanagement.util.StockEventProcessContext;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.List;
import java.util.UUID;

@Data
@AllArgsConstructor
@NoArgsConstructor
public class StockEventDto {

  private UUID facilityId;

  private UUID programId;

  private String signature;

  private String documentNumber;

  private UUID userId;

  private List<StockEventLineItem> lineItems;

  private StockEventProcessContext context;

  /**
   * Convert dto to jpa model.
   *
   * @param userId user id.
   * @return the converted jpa model object.
   */
  public StockEvent toEvent(UUID userId)
      throws InstantiationException, IllegalAccessException {

    StockEvent event = new StockEvent(facilityId, programId, userId,
        now(),//processed date generated by server side
        signature, documentNumber, lineItems);
    lineItems.forEach(lineItem -> lineItem.setStockEvent(event));
    return event;
  }

  public boolean hasSource() {
    return hasLineItems() && getLineItems().stream().anyMatch(StockEventLineItem::hasSourceId);
  }

  public boolean hasDestination() {
    return hasLineItems() && getLineItems().stream().anyMatch(StockEventLineItem::hasDestinationId);
  }

  /**
   * Check if this event is about physical inventory.
   *
   * @return boolean value that represent if this event is physical inventory.
   */
  public boolean isPhysicalInventory() {
    boolean noReason = hasLineItems()
        && getLineItems().stream().noneMatch(StockEventLineItem::hasReasonId);
    return noReason && !hasDestination() && !hasSource();
  }

  public boolean hasLineItems() {
    return !isEmpty(getLineItems());
  }
}
